{
  "openapi": "3.0.0",
  "info": {
    "title": "entity-persistence-service",
    "version": "1.0.0",
    "description": "A flexible REST backend with Loopback 4, MongoDB, and adaptable data modeling for efficient development. Part of the Tarcinapp Suite.",
    "contact": {
      "name": "Kadir Kürşat Tokpunar"
    }
  },
  "paths": {
    "/entities/count": {
      "get": {
        "x-controller-name": "EntityController",
        "x-operation-name": "count",
        "tags": [
          "EntityController"
        ],
        "responses": {
          "200": {
            "description": "Entity model count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "set",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "GenericEntity.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<GenericEntity>"
                }
              }
            }
          }
        ],
        "operationId": "EntityController.count"
      }
    },
    "/entities/{id}/children": {
      "post": {
        "x-controller-name": "EntityController",
        "x-operation-name": "createChild",
        "tags": [
          "EntityController"
        ],
        "responses": {
          "200": {
            "description": "Child Entity model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericEntityExcluding__idempotencyKey-_ownerUsersCount-_ownerGroupsCount-_viewerUsersCount-_viewerGroupsCount-_parentsCount_"
                }
              }
            }
          },
          "404": {
            "description": "Parent entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Entity name already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Entity limit is exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewChildEntity"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "EntityController.createChild"
      },
      "get": {
        "x-controller-name": "EntityController",
        "x-operation-name": "findChildren",
        "tags": [
          "EntityController"
        ],
        "responses": {
          "200": {
            "description": "Array of child Entity model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GenericEntityExcluding__idempotencyKey-_ownerUsersCount-_ownerGroupsCount-_viewerUsersCount-_viewerGroupsCount-_parentsCount_WithRelations"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "set",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericEntityFilter"
                }
              }
            }
          }
        ],
        "operationId": "EntityController.findChildren"
      }
    },
    "/entities/{id}/lists": {
      "get": {
        "x-controller-name": "ListsThroughEntitiesController",
        "x-operation-name": "find",
        "tags": [
          "ListsThroughEntitiesController"
        ],
        "responses": {
          "200": {
            "description": "Array of Lists through ListEntityRelation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/List"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "set",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "setThrough",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "filterThrough",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        ],
        "operationId": "ListsThroughEntitiesController.find"
      }
    },
    "/entities/{id}/parents": {
      "get": {
        "x-controller-name": "EntityController",
        "x-operation-name": "findParents",
        "tags": [
          "EntityController"
        ],
        "responses": {
          "200": {
            "description": "Array of parent Entity model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GenericEntityExcluding__idempotencyKey-_ownerUsersCount-_ownerGroupsCount-_viewerUsersCount-_viewerGroupsCount-_parentsCount_WithRelations"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "set",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericEntityFilter"
                }
              }
            }
          }
        ],
        "operationId": "EntityController.findParents"
      }
    },
    "/entities/{id}/reactions": {
      "post": {
        "x-controller-name": "ReactionsThroughEntitiesController",
        "x-operation-name": "create",
        "tags": [
          "ReactionsThroughEntitiesController"
        ],
        "responses": {
          "200": {
            "description": "EntityReaction model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityReactionExcluding__relationMetadata_"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse",
                      "definitions": {
                        "HttpErrorResponse": {
                          "$ref": "#/components/schemas/HttpErrorResponse1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Reaction already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse",
                      "definitions": {
                        "HttpErrorResponse": {
                          "$ref": "#/components/schemas/HttpErrorResponse1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse",
                      "definitions": {
                        "HttpErrorResponse": {
                          "$ref": "#/components/schemas/HttpErrorResponse1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Reaction limit is exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse",
                      "definitions": {
                        "HttpErrorResponse": {
                          "$ref": "#/components/schemas/HttpErrorResponse1"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewReactionInEntity"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "ReactionsThroughEntitiesController.create"
      },
      "patch": {
        "x-controller-name": "ReactionsThroughEntitiesController",
        "x-operation-name": "updateAll",
        "tags": [
          "ReactionsThroughEntitiesController"
        ],
        "responses": {
          "200": {
            "description": "Entity.Reaction PATCH success count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse",
                      "definitions": {
                        "HttpErrorResponse": {
                          "$ref": "#/components/schemas/HttpErrorResponse1"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse",
                      "definitions": {
                        "HttpErrorResponse": {
                          "$ref": "#/components/schemas/HttpErrorResponse1"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "set",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchReactionInEntity"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "ReactionsThroughEntitiesController.updateAll"
      },
      "get": {
        "x-controller-name": "ReactionsThroughEntitiesController",
        "x-operation-name": "find",
        "tags": [
          "ReactionsThroughEntitiesController"
        ],
        "responses": {
          "200": {
            "description": "Array of EntityReaction model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityReactionExcluding__relationMetadata_WithRelations"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse",
                      "definitions": {
                        "HttpErrorResponse": {
                          "$ref": "#/components/schemas/HttpErrorResponse1"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "set",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        ],
        "operationId": "ReactionsThroughEntitiesController.find"
      },
      "delete": {
        "x-controller-name": "ReactionsThroughEntitiesController",
        "x-operation-name": "deleteAll",
        "tags": [
          "ReactionsThroughEntitiesController"
        ],
        "responses": {
          "200": {
            "description": "Entity.Reaction DELETE success count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse",
                      "definitions": {
                        "HttpErrorResponse": {
                          "$ref": "#/components/schemas/HttpErrorResponse1"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "set",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        ],
        "operationId": "ReactionsThroughEntitiesController.deleteAll"
      }
    },
    "/entities/{id}": {
      "put": {
        "x-controller-name": "EntityController",
        "x-operation-name": "replaceById",
        "tags": [
          "EntityController"
        ],
        "responses": {
          "204": {
            "description": "Entity PUT success"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplaceEntity"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "EntityController.replaceById"
      },
      "patch": {
        "x-controller-name": "EntityController",
        "x-operation-name": "updateById",
        "tags": [
          "EntityController"
        ],
        "responses": {
          "204": {
            "description": "Entity PATCH success"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialEntity"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "EntityController.updateById"
      },
      "get": {
        "404": {
          "description": "Entity not found",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "error": {
                    "$ref": "#/components/schemas/HttpErrorResponse1"
                  }
                }
              }
            }
          }
        },
        "x-controller-name": "EntityController",
        "x-operation-name": "findById",
        "tags": [
          "EntityController"
        ],
        "responses": {
          "200": {
            "description": "Entity model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericEntityExcluding__idempotencyKey-_ownerUsersCount-_ownerGroupsCount-_viewerUsersCount-_viewerGroupsCount-_parentsCount_WithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericEntityFilter"
                }
              }
            }
          }
        ],
        "operationId": "EntityController.findById"
      },
      "delete": {
        "x-controller-name": "EntityController",
        "x-operation-name": "deleteById",
        "tags": [
          "EntityController"
        ],
        "responses": {
          "204": {
            "description": "Entity DELETE success"
          },
          "404": {
            "description": "Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "EntityController.deleteById"
      }
    },
    "/entities": {
      "post": {
        "x-controller-name": "EntityController",
        "x-operation-name": "create",
        "tags": [
          "EntityController"
        ],
        "responses": {
          "200": {
            "description": "Entity model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericEntityExcluding__idempotencyKey-_ownerUsersCount-_ownerGroupsCount-_viewerUsersCount-_viewerGroupsCount-_parentsCount_"
                }
              }
            }
          },
          "409": {
            "description": "Entity name already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Entity limit is exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewEntity"
              }
            }
          }
        },
        "operationId": "EntityController.create"
      },
      "patch": {
        "x-controller-name": "EntityController",
        "x-operation-name": "updateAll",
        "tags": [
          "EntityController"
        ],
        "responses": {
          "200": {
            "description": "Entity PATCH success count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "set",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "GenericEntity.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<GenericEntity>"
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialEntity"
              }
            }
          }
        },
        "operationId": "EntityController.updateAll"
      },
      "get": {
        "x-controller-name": "EntityController",
        "x-operation-name": "find",
        "tags": [
          "EntityController"
        ],
        "responses": {
          "200": {
            "description": "Array of Entity model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GenericEntityExcluding__idempotencyKey-_ownerUsersCount-_ownerGroupsCount-_viewerUsersCount-_viewerGroupsCount-_parentsCount_WithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "set",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericEntityFilter"
                }
              }
            }
          }
        ],
        "operationId": "EntityController.find"
      }
    },
    "/entity-reactions/count": {
      "get": {
        "x-controller-name": "EntityReactionController",
        "x-operation-name": "count",
        "tags": [
          "EntityReactionController"
        ],
        "responses": {
          "200": {
            "description": "EntityReaction model count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "set",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "EntityReaction.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<EntityReaction>"
                }
              }
            }
          },
          {
            "name": "entitySet",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "EntityReaction.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<EntityReaction>"
                }
              }
            }
          }
        ],
        "operationId": "EntityReactionController.count"
      }
    },
    "/entity-reactions/{id}/children": {
      "post": {
        "x-controller-name": "EntityReactionController",
        "x-operation-name": "createChild",
        "tags": [
          "EntityReactionController"
        ],
        "responses": {
          "200": {
            "description": "Child EntityReaction model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityReaction"
                }
              }
            }
          },
          "404": {
            "description": "Parent entity reaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Entity reaction already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Entity reaction limit is exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewChildEntityReaction"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "EntityReactionController.createChild"
      },
      "get": {
        "x-controller-name": "EntityReactionController",
        "x-operation-name": "findChildren",
        "tags": [
          "EntityReactionController"
        ],
        "responses": {
          "200": {
            "description": "Array of child EntityReaction model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityReactionWithRelations"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity reaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "set",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityReactionFilter"
                }
              }
            }
          },
          {
            "name": "entitySet",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "entityFilter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityReactionFilter"
                }
              }
            }
          }
        ],
        "operationId": "EntityReactionController.findChildren"
      }
    },
    "/entity-reactions/{id}/parents": {
      "get": {
        "x-controller-name": "EntityReactionController",
        "x-operation-name": "findParents",
        "tags": [
          "EntityReactionController"
        ],
        "responses": {
          "200": {
            "description": "Array of parent EntityReaction model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityReactionWithRelations"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Entity reaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "set",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityReactionFilter"
                }
              }
            }
          },
          {
            "name": "entitySet",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "entityFilter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityReactionFilter"
                }
              }
            }
          }
        ],
        "operationId": "EntityReactionController.findParents"
      }
    },
    "/entity-reactions/{id}": {
      "put": {
        "x-controller-name": "EntityReactionController",
        "x-operation-name": "replaceById",
        "tags": [
          "EntityReactionController"
        ],
        "responses": {
          "204": {
            "description": "EntityReaction PUT success"
          },
          "404": {
            "description": "Entity reaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplaceEntityReaction"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "EntityReactionController.replaceById"
      },
      "patch": {
        "x-controller-name": "EntityReactionController",
        "x-operation-name": "updateById",
        "tags": [
          "EntityReactionController"
        ],
        "responses": {
          "204": {
            "description": "EntityReaction PATCH success"
          },
          "404": {
            "description": "Entity reaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialEntityReaction"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "EntityReactionController.updateById"
      },
      "get": {
        "x-controller-name": "EntityReactionController",
        "x-operation-name": "findById",
        "tags": [
          "EntityReactionController"
        ],
        "responses": {
          "200": {
            "description": "EntityReaction model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityReactionWithRelations"
                }
              }
            }
          },
          "404": {
            "description": "Entity reaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityReactionFilter"
                }
              }
            }
          }
        ],
        "operationId": "EntityReactionController.findById"
      },
      "delete": {
        "x-controller-name": "EntityReactionController",
        "x-operation-name": "deleteById",
        "tags": [
          "EntityReactionController"
        ],
        "responses": {
          "204": {
            "description": "EntityReaction DELETE success"
          },
          "404": {
            "description": "Entity reaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "EntityReactionController.deleteById"
      }
    },
    "/entity-reactions": {
      "post": {
        "x-controller-name": "EntityReactionController",
        "x-operation-name": "create",
        "tags": [
          "EntityReactionController"
        ],
        "responses": {
          "200": {
            "description": "EntityReaction model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityReaction"
                }
              }
            }
          },
          "409": {
            "description": "Entity reaction already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Entity reaction limit is exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpErrorResponse"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewEntityReaction"
              }
            }
          }
        },
        "operationId": "EntityReactionController.create"
      },
      "patch": {
        "x-controller-name": "EntityReactionController",
        "x-operation-name": "updateAll",
        "tags": [
          "EntityReactionController"
        ],
        "responses": {
          "200": {
            "description": "EntityReaction PATCH success count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "set",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "EntityReaction.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<EntityReaction>"
                }
              }
            }
          },
          {
            "name": "entitySet",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "EntityReaction.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<EntityReaction>"
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialEntityReaction"
              }
            }
          }
        },
        "operationId": "EntityReactionController.updateAll"
      },
      "get": {
        "x-controller-name": "EntityReactionController",
        "x-operation-name": "find",
        "tags": [
          "EntityReactionController"
        ],
        "responses": {
          "200": {
            "description": "Array of EntityReaction model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntityReactionWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "set",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityReactionFilter"
                }
              }
            }
          },
          {
            "name": "entitySet",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "entityFilter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityReactionFilter"
                }
              }
            }
          }
        ],
        "operationId": "EntityReactionController.find"
      }
    },
    "/list-entity-relations/count": {
      "get": {
        "x-controller-name": "ListEntityRelController",
        "x-operation-name": "count",
        "tags": [
          "ListEntityRelController"
        ],
        "responses": {
          "200": {
            "description": "ListEntityRelation model count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "set",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ListToEntityRelation.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<ListToEntityRelation>"
                }
              }
            }
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ListToEntityRelation.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<ListToEntityRelation>"
                }
              }
            }
          },
          {
            "name": "listSet",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ListToEntityRelation.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<ListToEntityRelation>"
                }
              }
            }
          },
          {
            "name": "entitySet",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        ],
        "operationId": "ListEntityRelController.count"
      }
    },
    "/list-entity-relations/{id}": {
      "put": {
        "x-controller-name": "ListEntityRelController",
        "x-operation-name": "replaceById",
        "tags": [
          "ListEntityRelController"
        ],
        "responses": {
          "204": {
            "description": "ListEntityRelation PUT success"
          },
          "404": {
            "description": "List-entity relation not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable relation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplaceListEntityRelation"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "ListEntityRelController.replaceById"
      },
      "patch": {
        "x-controller-name": "ListEntityRelController",
        "x-operation-name": "updateById",
        "tags": [
          "ListEntityRelController"
        ],
        "responses": {
          "204": {
            "description": "ListEntityRelation PATCH success"
          },
          "404": {
            "description": "List-entity relation not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable relation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchListEntityRelation"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "ListEntityRelController.updateById"
      },
      "get": {
        "x-controller-name": "ListEntityRelController",
        "x-operation-name": "findById",
        "tags": [
          "ListEntityRelController"
        ],
        "responses": {
          "200": {
            "description": "ListEntityRelation model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListToEntityRelationWithRelations"
                }
              }
            }
          },
          "404": {
            "description": "List-entity relation not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListToEntityRelationFilter"
                }
              }
            }
          }
        ],
        "operationId": "ListEntityRelController.findById"
      },
      "delete": {
        "x-controller-name": "ListEntityRelController",
        "x-operation-name": "deleteById",
        "tags": [
          "ListEntityRelController"
        ],
        "responses": {
          "204": {
            "description": "ListEntityRelation DELETE success"
          },
          "404": {
            "description": "List-entity relation not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "ListEntityRelController.deleteById"
      }
    },
    "/list-entity-relations": {
      "post": {
        "x-controller-name": "ListEntityRelController",
        "x-operation-name": "create",
        "tags": [
          "ListEntityRelController"
        ],
        "responses": {
          "200": {
            "description": "  ListEntityRelation model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListToEntityRelation"
                }
              }
            }
          },
          "404": {
            "description": "List or Entity not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Relation already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable relation",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Relation limit is exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewListEntityRelation"
              }
            }
          }
        },
        "operationId": "ListEntityRelController.create"
      },
      "patch": {
        "x-controller-name": "ListEntityRelController",
        "x-operation-name": "updateAll",
        "tags": [
          "ListEntityRelController"
        ],
        "responses": {
          "200": {
            "description": "ListEntityRelation PATCH success count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "set",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ListToEntityRelation.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<ListToEntityRelation>"
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListToEntityRelationPartialExcluding__id-_slug-_ownerUsersCount-_ownerGroupsCount-_viewerUsersCount-_viewerGroupsCount-_parentsCount-_fromMetadata-_toMetadata-_relationMetadata-_version-_idempotencyKey_"
              }
            }
          }
        },
        "operationId": "ListEntityRelController.updateAll"
      },
      "get": {
        "x-controller-name": "ListEntityRelController",
        "x-operation-name": "find",
        "tags": [
          "ListEntityRelController"
        ],
        "responses": {
          "200": {
            "description": "Array of ListEntityRelation model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListToEntityRelationWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "set",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListToEntityRelationFilter"
                }
              }
            }
          },
          {
            "name": "listFilter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListToEntityRelationFilter"
                }
              }
            }
          },
          {
            "name": "listSet",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "entityFilter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListToEntityRelationFilter"
                }
              }
            }
          },
          {
            "name": "entitySet",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        ],
        "operationId": "ListEntityRelController.find"
      }
    },
    "/list-reactions/count": {
      "get": {
        "x-controller-name": "ListReactionController",
        "x-operation-name": "count",
        "tags": [
          "ListReactionController"
        ],
        "responses": {
          "200": {
            "description": "ListReaction model count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ListReaction.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<ListReaction>"
                }
              }
            }
          }
        ],
        "operationId": "ListReactionController.count"
      }
    },
    "/list-reactions/{id}": {
      "put": {
        "x-controller-name": "ListReactionController",
        "x-operation-name": "replaceById",
        "tags": [
          "ListReactionController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "ListReaction PUT success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListReaction"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "ListReactionController.replaceById"
      },
      "patch": {
        "x-controller-name": "ListReactionController",
        "x-operation-name": "updateById",
        "tags": [
          "ListReactionController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "ListReaction PATCH success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListReactionPartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "ListReactionController.updateById"
      },
      "get": {
        "x-controller-name": "ListReactionController",
        "x-operation-name": "findById",
        "tags": [
          "ListReactionController"
        ],
        "responses": {
          "200": {
            "description": "ListReaction model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListReactionWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListReaction.Filter"
                }
              }
            }
          }
        ],
        "operationId": "ListReactionController.findById"
      },
      "delete": {
        "x-controller-name": "ListReactionController",
        "x-operation-name": "deleteById",
        "tags": [
          "ListReactionController"
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {
              "application/json": {
                "schema": {
                  "description": "ListReaction DELETE success"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "ListReactionController.deleteById"
      }
    },
    "/list-reactions": {
      "post": {
        "x-controller-name": "ListReactionController",
        "x-operation-name": "create",
        "tags": [
          "ListReactionController"
        ],
        "responses": {
          "200": {
            "description": "ListReaction model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListReaction"
                }
              }
            }
          },
          "409": {
            "description": "List reaction already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "List reaction limit is exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewListReaction"
              }
            }
          }
        },
        "operationId": "ListReactionController.create"
      },
      "patch": {
        "x-controller-name": "ListReactionController",
        "x-operation-name": "updateAll",
        "tags": [
          "ListReactionController"
        ],
        "responses": {
          "200": {
            "description": "ListReaction PATCH success count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ListReaction.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<ListReaction>"
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListReactionPartial"
              }
            }
          }
        },
        "operationId": "ListReactionController.updateAll"
      },
      "get": {
        "x-controller-name": "ListReactionController",
        "x-operation-name": "find",
        "tags": [
          "ListReactionController"
        ],
        "responses": {
          "200": {
            "description": "Array of ListReaction model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListReactionWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListReaction.Filter1"
                }
              }
            }
          }
        ],
        "operationId": "ListReactionController.find"
      }
    },
    "/lists/count": {
      "get": {
        "x-controller-name": "ListController",
        "x-operation-name": "count",
        "tags": [
          "ListController"
        ],
        "responses": {
          "200": {
            "description": "List model count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "set",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "List.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<List>"
                }
              }
            }
          }
        ],
        "operationId": "ListController.count"
      }
    },
    "/lists/{id}/children": {
      "post": {
        "x-controller-name": "ListController",
        "x-operation-name": "createChild",
        "tags": [
          "ListController"
        ],
        "responses": {
          "200": {
            "description": "Child List model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/List"
                }
              }
            }
          },
          "404": {
            "description": "Parent list not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "List name already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable list",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "List limit is exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewChildList"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "ListController.createChild"
      },
      "get": {
        "x-controller-name": "ListController",
        "x-operation-name": "findChildren",
        "tags": [
          "ListController"
        ],
        "responses": {
          "200": {
            "description": "Array of child List model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListWithRelations"
                  }
                }
              }
            }
          },
          "404": {
            "description": "List not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "set",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFilter"
                }
              }
            }
          }
        ],
        "operationId": "ListController.findChildren"
      }
    },
    "/lists/{id}/entities": {
      "post": {
        "x-controller-name": "EntitiesThroughListController",
        "x-operation-name": "create",
        "tags": [
          "EntitiesThroughListController"
        ],
        "responses": {
          "200": {
            "description": "Entity model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericEntity"
                }
              }
            }
          },
          "404": {
            "description": "List not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Entity name already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Entity limit is exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewEntityInList"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "EntitiesThroughListController.create"
      },
      "patch": {
        "x-controller-name": "EntitiesThroughListController",
        "x-operation-name": "patch",
        "tags": [
          "EntitiesThroughListController"
        ],
        "responses": {
          "200": {
            "description": "List.Entity PATCH success count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          },
          "404": {
            "description": "List not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "set",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "GenericEntity.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<GenericEntity>"
                }
              }
            }
          },
          {
            "name": "setThrough",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "whereThrough",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchEntityInList"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "EntitiesThroughListController.patch"
      },
      "get": {
        "x-controller-name": "EntitiesThroughListController",
        "x-operation-name": "find",
        "tags": [
          "EntitiesThroughListController"
        ],
        "responses": {
          "200": {
            "description": "Array of Entity model instances through List",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GenericEntityWithRelations"
                  }
                }
              }
            }
          },
          "404": {
            "description": "List not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "set",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "setThrough",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "filterThrough",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        ],
        "operationId": "EntitiesThroughListController.find"
      },
      "delete": {
        "x-controller-name": "EntitiesThroughListController",
        "x-operation-name": "delete",
        "tags": [
          "EntitiesThroughListController"
        ],
        "responses": {
          "200": {
            "description": "List.Entity DELETE success count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          },
          "404": {
            "description": "List not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "set",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "GenericEntity.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<GenericEntity>"
                }
              }
            }
          },
          {
            "name": "whereThrough",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        ],
        "operationId": "EntitiesThroughListController.delete"
      }
    },
    "/lists/{id}/parents": {
      "get": {
        "x-controller-name": "ListController",
        "x-operation-name": "findParents",
        "tags": [
          "ListController"
        ],
        "responses": {
          "200": {
            "description": "Array of parent List model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListWithRelations"
                  }
                }
              }
            }
          },
          "404": {
            "description": "List not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "set",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFilter"
                }
              }
            }
          }
        ],
        "operationId": "ListController.findParents"
      }
    },
    "/lists/{id}/reactions": {
      "post": {
        "x-controller-name": "ReactionsThroughListsController",
        "x-operation-name": "create",
        "tags": [
          "ReactionsThroughListsController"
        ],
        "responses": {
          "200": {
            "description": "List model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListReaction"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewListReactionsInList"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "ReactionsThroughListsController.create"
      },
      "patch": {
        "x-controller-name": "ReactionsThroughListsController",
        "x-operation-name": "patch",
        "tags": [
          "ReactionsThroughListsController"
        ],
        "responses": {
          "200": {
            "description": "List.ListReactions PATCH success count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ListReaction.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<ListReaction>"
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListReactionPartial"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "ReactionsThroughListsController.patch"
      },
      "get": {
        "x-controller-name": "ReactionsThroughListsController",
        "x-operation-name": "find",
        "tags": [
          "ReactionsThroughListsController"
        ],
        "responses": {
          "200": {
            "description": "Array of List has many ListReactions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListReaction"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        ],
        "operationId": "ReactionsThroughListsController.find"
      },
      "delete": {
        "x-controller-name": "ReactionsThroughListsController",
        "x-operation-name": "delete",
        "tags": [
          "ReactionsThroughListsController"
        ],
        "responses": {
          "200": {
            "description": "List.ListReactions DELETE success count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "ListReaction.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<ListReaction>"
                }
              }
            }
          }
        ],
        "operationId": "ReactionsThroughListsController.delete"
      }
    },
    "/lists/{id}": {
      "put": {
        "x-controller-name": "ListController",
        "x-operation-name": "replaceById",
        "tags": [
          "ListController"
        ],
        "responses": {
          "204": {
            "description": "List PUT success"
          },
          "404": {
            "description": "List not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable list",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewList"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "ListController.replaceById"
      },
      "patch": {
        "x-controller-name": "ListController",
        "x-operation-name": "updateById",
        "tags": [
          "ListController"
        ],
        "responses": {
          "204": {
            "description": "List PATCH success"
          },
          "404": {
            "description": "List not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable list",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialList"
              }
            }
          },
          "x-parameter-index": 1
        },
        "operationId": "ListController.updateById"
      },
      "get": {
        "404": {
          "description": "List not found",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "error": {
                    "$ref": "#/components/schemas/HttpErrorResponse1"
                  }
                }
              }
            }
          }
        },
        "x-controller-name": "ListController",
        "x-operation-name": "findById",
        "tags": [
          "ListController"
        ],
        "responses": {
          "200": {
            "description": "List model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListWithRelations"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFilter"
                }
              }
            }
          }
        ],
        "operationId": "ListController.findById"
      },
      "delete": {
        "x-controller-name": "ListController",
        "x-operation-name": "deleteById",
        "tags": [
          "ListController"
        ],
        "responses": {
          "204": {
            "description": "List DELETE success"
          },
          "404": {
            "description": "List not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "ListController.deleteById"
      }
    },
    "/lists": {
      "post": {
        "422": {
          "description": "Unprocessable list",
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "error": {
                    "$ref": "#/components/schemas/HttpErrorResponse1"
                  }
                }
              }
            }
          }
        },
        "x-controller-name": "ListController",
        "x-operation-name": "create",
        "tags": [
          "ListController"
        ],
        "responses": {
          "200": {
            "description": "List model instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/List"
                }
              }
            }
          },
          "409": {
            "description": "List already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "List limit is exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/HttpErrorResponse1"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewList"
              }
            }
          }
        },
        "operationId": "ListController.create"
      },
      "patch": {
        "x-controller-name": "ListController",
        "x-operation-name": "updateAll",
        "tags": [
          "ListController"
        ],
        "responses": {
          "200": {
            "description": "List PATCH success count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loopback.Count"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "set",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "where",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "List.WhereFilter",
                  "additionalProperties": true,
                  "x-typescript-type": "@loopback/repository#Where<List>"
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartialList"
              }
            }
          }
        },
        "operationId": "ListController.updateAll"
      },
      "get": {
        "x-controller-name": "ListController",
        "x-operation-name": "find",
        "tags": [
          "ListController"
        ],
        "responses": {
          "200": {
            "description": "Array of List model instances",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListWithRelations"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "set",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          },
          {
            "name": "filter",
            "in": "query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFilter"
                }
              }
            }
          }
        ],
        "operationId": "ListController.find"
      }
    },
    "/ping": {
      "get": {
        "x-controller-name": "PingController",
        "x-operation-name": "ping",
        "tags": [
          "PingController"
        ],
        "responses": {
          "200": {
            "description": "Ping Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PingResponse"
                }
              }
            }
          }
        },
        "operationId": "PingController.ping"
      }
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "components": {
    "schemas": {
      "ListReaction": {
        "title": "ListReaction",
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_idempotencyKey": {
            "type": "string"
          },
          "_version": {
            "type": "number"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_ownerUsersCount": {
            "type": "number"
          },
          "_ownerGroupsCount": {
            "type": "number"
          },
          "_viewerUsersCount": {
            "type": "number"
          },
          "_viewerGroupsCount": {
            "type": "number"
          },
          "_parentsCount": {
            "type": "number"
          },
          "_relationMetadata": {
            "type": "object",
            "description": "Contains the relation metadata for the record"
          },
          "_listId": {
            "type": "string"
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/list-reactions/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          }
        },
        "required": [
          "_listId"
        ],
        "additionalProperties": true
      },
      "NewListReactionsInList": {
        "title": "NewListReactionsInList",
        "type": "object",
        "description": "(tsType: @loopback/repository-json-schema#Optional<Omit<ListReaction, 'id'>, 'listId'>, schemaOptions: { title: 'NewListReactionsInList', exclude: [ 'id' ], optional: [ 'listId' ] })",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_idempotencyKey": {
            "type": "string"
          },
          "_version": {
            "type": "number"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_ownerUsersCount": {
            "type": "number"
          },
          "_ownerGroupsCount": {
            "type": "number"
          },
          "_viewerUsersCount": {
            "type": "number"
          },
          "_viewerGroupsCount": {
            "type": "number"
          },
          "_parentsCount": {
            "type": "number"
          },
          "_relationMetadata": {
            "type": "object",
            "description": "Contains the relation metadata for the record"
          },
          "_listId": {
            "type": "string"
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/list-reactions/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          }
        },
        "required": [
          "_listId"
        ],
        "additionalProperties": true,
        "x-typescript-type": "@loopback/repository-json-schema#Optional<Omit<ListReaction, 'id'>, 'listId'>"
      },
      "ListReactionPartial": {
        "title": "ListReactionPartial",
        "type": "object",
        "description": "(tsType: Partial<ListReaction>, schemaOptions: { partial: true })",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_idempotencyKey": {
            "type": "string"
          },
          "_version": {
            "type": "number"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_ownerUsersCount": {
            "type": "number"
          },
          "_ownerGroupsCount": {
            "type": "number"
          },
          "_viewerUsersCount": {
            "type": "number"
          },
          "_viewerGroupsCount": {
            "type": "number"
          },
          "_parentsCount": {
            "type": "number"
          },
          "_relationMetadata": {
            "type": "object",
            "description": "Contains the relation metadata for the record"
          },
          "_listId": {
            "type": "string"
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/list-reactions/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          }
        },
        "additionalProperties": true,
        "x-typescript-type": "Partial<ListReaction>"
      },
      "EntityReactionExcluding__relationMetadata_WithRelations": {
        "title": "EntityReactionExcluding__relationMetadata_WithRelations",
        "type": "object",
        "description": "(tsType: Omit<EntityReactionWithRelations, '_relationMetadata'>, schemaOptions: { includeRelations: true, exclude: [ '_relationMetadata' ] })",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_idempotencyKey": {
            "type": "string"
          },
          "_version": {
            "type": "number"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_ownerUsersCount": {
            "type": "number"
          },
          "_ownerGroupsCount": {
            "type": "number"
          },
          "_viewerUsersCount": {
            "type": "number"
          },
          "_viewerGroupsCount": {
            "type": "number"
          },
          "_parentsCount": {
            "type": "number"
          },
          "_entityId": {
            "type": "string"
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/entity-reactions/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          }
        },
        "required": [
          "_entityId"
        ],
        "additionalProperties": true,
        "x-typescript-type": "Omit<EntityReactionWithRelations, '_relationMetadata'>"
      },
      "EntityReactionExcluding__relationMetadata_": {
        "title": "EntityReactionExcluding__relationMetadata_",
        "type": "object",
        "description": "(tsType: Omit<EntityReaction, '_relationMetadata'>, schemaOptions: { exclude: [ '_relationMetadata' ] })",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_idempotencyKey": {
            "type": "string"
          },
          "_version": {
            "type": "number"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_ownerUsersCount": {
            "type": "number"
          },
          "_ownerGroupsCount": {
            "type": "number"
          },
          "_viewerUsersCount": {
            "type": "number"
          },
          "_viewerGroupsCount": {
            "type": "number"
          },
          "_parentsCount": {
            "type": "number"
          },
          "_entityId": {
            "type": "string"
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/entity-reactions/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          }
        },
        "required": [
          "_entityId"
        ],
        "additionalProperties": true,
        "x-typescript-type": "Omit<EntityReaction, '_relationMetadata'>"
      },
      "NewReactionInEntity": {
        "title": "NewReactionInEntity",
        "type": "object",
        "description": "(tsType: Omit<EntityReaction, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>, schemaOptions: { title: 'NewReactionInEntity', exclude: [ '_id', '_slug', '_ownerUsersCount', '_ownerGroupsCount', '_viewerUsersCount', '_viewerGroupsCount', '_parentsCount', '_fromMetadata', '_toMetadata', '_relationMetadata', '_version', '_idempotencyKey' ], includeRelations: false })",
        "properties": {
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_entityId": {
            "type": "string"
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/entity-reactions/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          }
        },
        "required": [
          "_entityId"
        ],
        "additionalProperties": true,
        "x-typescript-type": "Omit<EntityReaction, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>"
      },
      "PatchReactionInEntity": {
        "title": "PatchReactionInEntity",
        "type": "object",
        "description": "(tsType: Omit<Partial<EntityReaction>, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>, schemaOptions: { title: 'PatchReactionInEntity', partial: true, exclude: [ '_id', '_slug', '_ownerUsersCount', '_ownerGroupsCount', '_viewerUsersCount', '_viewerGroupsCount', '_parentsCount', '_fromMetadata', '_toMetadata', '_relationMetadata', '_version', '_idempotencyKey' ], includeRelations: false })",
        "properties": {
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_entityId": {
            "type": "string"
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/entity-reactions/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          }
        },
        "additionalProperties": true,
        "x-typescript-type": "Omit<Partial<EntityReaction>, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>"
      },
      "List": {
        "title": "List",
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_idempotencyKey": {
            "type": "string"
          },
          "_version": {
            "type": "number"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_name": {
            "type": "string",
            "minLength": 2
          },
          "_slug": {
            "type": "string"
          },
          "_ownerUsersCount": {
            "type": "number"
          },
          "_ownerGroupsCount": {
            "type": "number"
          },
          "_viewerUsersCount": {
            "type": "number"
          },
          "_viewerGroupsCount": {
            "type": "number"
          },
          "_parentsCount": {
            "type": "number"
          },
          "_relationMetadata": {
            "type": "object",
            "description": "Contains the relation metadata for the record"
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/lists/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          }
        },
        "additionalProperties": true
      },
      "NewList": {
        "title": "NewList",
        "type": "object",
        "description": "(tsType: Omit<List, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>, schemaOptions: { title: 'NewList', exclude: [ '_id', '_slug', '_ownerUsersCount', '_ownerGroupsCount', '_viewerUsersCount', '_viewerGroupsCount', '_parentsCount', '_fromMetadata', '_toMetadata', '_relationMetadata', '_version', '_idempotencyKey' ], includeRelations: false })",
        "properties": {
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_name": {
            "type": "string",
            "minLength": 2
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/lists/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          }
        },
        "additionalProperties": true,
        "x-typescript-type": "Omit<List, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>"
      },
      "EntityReactionWithRelations": {
        "title": "EntityReactionWithRelations",
        "type": "object",
        "description": "(tsType: EntityReactionWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_idempotencyKey": {
            "type": "string"
          },
          "_version": {
            "type": "number"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_ownerUsersCount": {
            "type": "number"
          },
          "_ownerGroupsCount": {
            "type": "number"
          },
          "_viewerUsersCount": {
            "type": "number"
          },
          "_viewerGroupsCount": {
            "type": "number"
          },
          "_parentsCount": {
            "type": "number"
          },
          "_relationMetadata": {
            "type": "object",
            "description": "Contains the relation metadata for the record"
          },
          "_entityId": {
            "type": "string"
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/entity-reactions/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          }
        },
        "required": [
          "_entityId"
        ],
        "additionalProperties": true,
        "x-typescript-type": "EntityReactionWithRelations"
      },
      "GenericEntityWithRelations": {
        "title": "GenericEntityWithRelations",
        "type": "object",
        "description": "(tsType: GenericEntityWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_idempotencyKey": {
            "type": "string"
          },
          "_version": {
            "type": "number"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_name": {
            "type": "string",
            "minLength": 2
          },
          "_slug": {
            "type": "string"
          },
          "_ownerUsersCount": {
            "type": "number"
          },
          "_ownerGroupsCount": {
            "type": "number"
          },
          "_viewerUsersCount": {
            "type": "number"
          },
          "_viewerGroupsCount": {
            "type": "number"
          },
          "_parentsCount": {
            "type": "number"
          },
          "_relationMetadata": {
            "type": "object",
            "description": "Contains the relation metadata for the record"
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/entities/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          },
          "_reactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityReactionWithRelations"
            }
          }
        },
        "additionalProperties": true,
        "x-typescript-type": "GenericEntityWithRelations"
      },
      "ListReactionWithRelations": {
        "title": "ListReactionWithRelations",
        "type": "object",
        "description": "(tsType: ListReactionWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_idempotencyKey": {
            "type": "string"
          },
          "_version": {
            "type": "number"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_ownerUsersCount": {
            "type": "number"
          },
          "_ownerGroupsCount": {
            "type": "number"
          },
          "_viewerUsersCount": {
            "type": "number"
          },
          "_viewerGroupsCount": {
            "type": "number"
          },
          "_parentsCount": {
            "type": "number"
          },
          "_relationMetadata": {
            "type": "object",
            "description": "Contains the relation metadata for the record"
          },
          "_listId": {
            "type": "string"
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/list-reactions/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          }
        },
        "required": [
          "_listId"
        ],
        "additionalProperties": true,
        "x-typescript-type": "ListReactionWithRelations"
      },
      "ListWithRelations": {
        "title": "ListWithRelations",
        "type": "object",
        "description": "(tsType: ListWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_idempotencyKey": {
            "type": "string"
          },
          "_version": {
            "type": "number"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_name": {
            "type": "string",
            "minLength": 2
          },
          "_slug": {
            "type": "string"
          },
          "_ownerUsersCount": {
            "type": "number"
          },
          "_ownerGroupsCount": {
            "type": "number"
          },
          "_viewerUsersCount": {
            "type": "number"
          },
          "_viewerGroupsCount": {
            "type": "number"
          },
          "_parentsCount": {
            "type": "number"
          },
          "_relationMetadata": {
            "type": "object",
            "description": "Contains the relation metadata for the record"
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/lists/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          },
          "_entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenericEntityWithRelations"
            }
          },
          "_reactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListReactionWithRelations"
            }
          }
        },
        "additionalProperties": true,
        "x-typescript-type": "ListWithRelations"
      },
      "PartialList": {
        "title": "PartialList",
        "type": "object",
        "description": "(tsType: Omit<Partial<List>, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>, schemaOptions: { title: 'PartialList', partial: true, exclude: [ '_id', '_slug', '_ownerUsersCount', '_ownerGroupsCount', '_viewerUsersCount', '_viewerGroupsCount', '_parentsCount', '_fromMetadata', '_toMetadata', '_relationMetadata', '_version', '_idempotencyKey' ], includeRelations: false })",
        "properties": {
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_name": {
            "type": "string",
            "minLength": 2
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/lists/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          }
        },
        "additionalProperties": true,
        "x-typescript-type": "Omit<Partial<List>, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>"
      },
      "NewChildList": {
        "title": "NewChildList",
        "type": "object",
        "description": "(tsType: Omit<List, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey' | '_parents'>, schemaOptions: { title: 'NewChildList', exclude: [ '_id', '_slug', '_ownerUsersCount', '_ownerGroupsCount', '_viewerUsersCount', '_viewerGroupsCount', '_parentsCount', '_fromMetadata', '_toMetadata', '_relationMetadata', '_version', '_idempotencyKey', '_parents' ], includeRelations: false })",
        "properties": {
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_name": {
            "type": "string",
            "minLength": 2
          }
        },
        "additionalProperties": true,
        "x-typescript-type": "Omit<List, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey' | '_parents'>"
      },
      "NewListReaction": {
        "title": "NewListReaction",
        "type": "object",
        "description": "(tsType: Omit<ListReaction, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>, schemaOptions: { title: 'NewListReaction', exclude: [ '_id', '_slug', '_ownerUsersCount', '_ownerGroupsCount', '_viewerUsersCount', '_viewerGroupsCount', '_parentsCount', '_fromMetadata', '_toMetadata', '_relationMetadata', '_version', '_idempotencyKey' ], includeRelations: false })",
        "properties": {
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_listId": {
            "type": "string"
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/list-reactions/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          }
        },
        "required": [
          "_listId"
        ],
        "additionalProperties": true,
        "x-typescript-type": "Omit<ListReaction, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>"
      },
      "ListToEntityRelation": {
        "title": "ListToEntityRelation",
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_idempotencyKey": {
            "type": "string"
          },
          "_version": {
            "type": "number"
          },
          "_listId": {
            "type": "string"
          },
          "_entityId": {
            "type": "string"
          },
          "_fromMetadata": {
            "type": "object",
            "description": "Metadata for the source entity"
          },
          "_toMetadata": {
            "type": "object",
            "description": "Metadata for the destination entity"
          }
        },
        "required": [
          "_listId",
          "_entityId"
        ],
        "additionalProperties": true
      },
      "NewListEntityRelation": {
        "title": "NewListEntityRelation",
        "type": "object",
        "description": "(tsType: Omit<ListToEntityRelation, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>, schemaOptions: { title: 'NewListEntityRelation', exclude: [ '_id', '_slug', '_ownerUsersCount', '_ownerGroupsCount', '_viewerUsersCount', '_viewerGroupsCount', '_parentsCount', '_fromMetadata', '_toMetadata', '_relationMetadata', '_version', '_idempotencyKey' ], includeRelations: false })",
        "properties": {
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_listId": {
            "type": "string"
          },
          "_entityId": {
            "type": "string"
          }
        },
        "required": [
          "_listId",
          "_entityId"
        ],
        "additionalProperties": true,
        "x-typescript-type": "Omit<ListToEntityRelation, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>"
      },
      "ListToEntityRelationWithRelations": {
        "title": "ListToEntityRelationWithRelations",
        "type": "object",
        "description": "(tsType: ListToEntityRelationWithRelations, schemaOptions: { includeRelations: true })",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_idempotencyKey": {
            "type": "string"
          },
          "_version": {
            "type": "number"
          },
          "_listId": {
            "type": "string"
          },
          "_entityId": {
            "type": "string"
          },
          "_fromMetadata": {
            "type": "object",
            "description": "Metadata for the source entity"
          },
          "_toMetadata": {
            "type": "object",
            "description": "Metadata for the destination entity"
          }
        },
        "required": [
          "_listId",
          "_entityId"
        ],
        "additionalProperties": true,
        "x-typescript-type": "ListToEntityRelationWithRelations"
      },
      "ListToEntityRelationPartialExcluding__id-_slug-_ownerUsersCount-_ownerGroupsCount-_viewerUsersCount-_viewerGroupsCount-_parentsCount-_fromMetadata-_toMetadata-_relationMetadata-_version-_idempotencyKey_": {
        "title": "ListToEntityRelationPartialExcluding__id-_slug-_ownerUsersCount-_ownerGroupsCount-_viewerUsersCount-_viewerGroupsCount-_parentsCount-_fromMetadata-_toMetadata-_relationMetadata-_version-_idempotencyKey_",
        "type": "object",
        "description": "(tsType: Omit<Partial<ListToEntityRelation>, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>, schemaOptions: { exclude: [ '_id', '_slug', '_ownerUsersCount', '_ownerGroupsCount', '_viewerUsersCount', '_viewerGroupsCount', '_parentsCount', '_fromMetadata', '_toMetadata', '_relationMetadata', '_version', '_idempotencyKey' ], includeRelations: false, partial: true })",
        "properties": {
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_listId": {
            "type": "string"
          },
          "_entityId": {
            "type": "string"
          }
        },
        "additionalProperties": true,
        "x-typescript-type": "Omit<Partial<ListToEntityRelation>, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>"
      },
      "PatchListEntityRelation": {
        "title": "PatchListEntityRelation",
        "type": "object",
        "description": "(tsType: Omit<Partial<ListToEntityRelation>, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>, schemaOptions: { title: 'PatchListEntityRelation', exclude: [ '_id', '_slug', '_ownerUsersCount', '_ownerGroupsCount', '_viewerUsersCount', '_viewerGroupsCount', '_parentsCount', '_fromMetadata', '_toMetadata', '_relationMetadata', '_version', '_idempotencyKey' ], includeRelations: false, partial: true })",
        "properties": {
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_listId": {
            "type": "string"
          },
          "_entityId": {
            "type": "string"
          }
        },
        "additionalProperties": true,
        "x-typescript-type": "Omit<Partial<ListToEntityRelation>, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>"
      },
      "ReplaceListEntityRelation": {
        "title": "ReplaceListEntityRelation",
        "type": "object",
        "description": "(tsType: Omit<ListToEntityRelation, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>, schemaOptions: { title: 'ReplaceListEntityRelation', exclude: [ '_id', '_slug', '_ownerUsersCount', '_ownerGroupsCount', '_viewerUsersCount', '_viewerGroupsCount', '_parentsCount', '_fromMetadata', '_toMetadata', '_relationMetadata', '_version', '_idempotencyKey' ], includeRelations: false })",
        "properties": {
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_listId": {
            "type": "string"
          },
          "_entityId": {
            "type": "string"
          }
        },
        "required": [
          "_listId",
          "_entityId"
        ],
        "additionalProperties": true,
        "x-typescript-type": "Omit<ListToEntityRelation, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>"
      },
      "GenericEntityExcluding__idempotencyKey-_ownerUsersCount-_ownerGroupsCount-_viewerUsersCount-_viewerGroupsCount-_parentsCount_": {
        "title": "GenericEntityExcluding__idempotencyKey-_ownerUsersCount-_ownerGroupsCount-_viewerUsersCount-_viewerGroupsCount-_parentsCount_",
        "type": "object",
        "description": "(tsType: Omit<GenericEntity, '_idempotencyKey' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount'>, schemaOptions: { exclude: [ '_idempotencyKey', '_ownerUsersCount', '_ownerGroupsCount', '_viewerUsersCount', '_viewerGroupsCount', '_parentsCount' ] })",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_version": {
            "type": "number"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_name": {
            "type": "string",
            "minLength": 2
          },
          "_slug": {
            "type": "string"
          },
          "_relationMetadata": {
            "type": "object",
            "description": "Contains the relation metadata for the record"
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/entities/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          }
        },
        "additionalProperties": true,
        "x-typescript-type": "Omit<GenericEntity, '_idempotencyKey' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount'>"
      },
      "NewEntity": {
        "title": "NewEntity",
        "type": "object",
        "description": "(tsType: Omit<GenericEntity, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>, schemaOptions: { title: 'NewEntity', exclude: [ '_id', '_slug', '_ownerUsersCount', '_ownerGroupsCount', '_viewerUsersCount', '_viewerGroupsCount', '_parentsCount', '_fromMetadata', '_toMetadata', '_relationMetadata', '_version', '_idempotencyKey' ], includeRelations: false })",
        "properties": {
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_name": {
            "type": "string",
            "minLength": 2
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/entities/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          }
        },
        "additionalProperties": true,
        "x-typescript-type": "Omit<GenericEntity, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>"
      },
      "EntityReactionExcluding__idempotencyKey-_ownerUsersCount-_ownerGroupsCount-_viewerUsersCount-_viewerGroupsCount-_parentsCount_WithRelations": {
        "title": "EntityReactionExcluding__idempotencyKey-_ownerUsersCount-_ownerGroupsCount-_viewerUsersCount-_viewerGroupsCount-_parentsCount_WithRelations",
        "type": "object",
        "description": "(tsType: Omit<EntityReactionWithRelations, '_idempotencyKey' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount'>, schemaOptions: { includeRelations: true, exclude: [ '_idempotencyKey', '_ownerUsersCount', '_ownerGroupsCount', '_viewerUsersCount', '_viewerGroupsCount', '_parentsCount' ] })",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_version": {
            "type": "number"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_relationMetadata": {
            "type": "object",
            "description": "Contains the relation metadata for the record"
          },
          "_entityId": {
            "type": "string"
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/entity-reactions/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          }
        },
        "required": [
          "_entityId"
        ],
        "additionalProperties": true,
        "x-typescript-type": "Omit<EntityReactionWithRelations, '_idempotencyKey' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount'>"
      },
      "GenericEntityExcluding__idempotencyKey-_ownerUsersCount-_ownerGroupsCount-_viewerUsersCount-_viewerGroupsCount-_parentsCount_WithRelations": {
        "title": "GenericEntityExcluding__idempotencyKey-_ownerUsersCount-_ownerGroupsCount-_viewerUsersCount-_viewerGroupsCount-_parentsCount_WithRelations",
        "type": "object",
        "description": "(tsType: Omit<GenericEntityWithRelations, '_idempotencyKey' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount'>, schemaOptions: { includeRelations: true, exclude: [ '_idempotencyKey', '_ownerUsersCount', '_ownerGroupsCount', '_viewerUsersCount', '_viewerGroupsCount', '_parentsCount' ] })",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_version": {
            "type": "number"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_name": {
            "type": "string",
            "minLength": 2
          },
          "_slug": {
            "type": "string"
          },
          "_relationMetadata": {
            "type": "object",
            "description": "Contains the relation metadata for the record"
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/entities/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          },
          "_reactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityReactionExcluding__idempotencyKey-_ownerUsersCount-_ownerGroupsCount-_viewerUsersCount-_viewerGroupsCount-_parentsCount_WithRelations"
            }
          }
        },
        "additionalProperties": true,
        "x-typescript-type": "Omit<GenericEntityWithRelations, '_idempotencyKey' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount'>"
      },
      "PartialEntity": {
        "title": "PartialEntity",
        "type": "object",
        "description": "(tsType: @loopback/repository-json-schema#Optional<Omit<GenericEntity, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>, '_name'>, schemaOptions: { title: 'PartialEntity', exclude: [ '_id', '_slug', '_ownerUsersCount', '_ownerGroupsCount', '_viewerUsersCount', '_viewerGroupsCount', '_parentsCount', '_fromMetadata', '_toMetadata', '_relationMetadata', '_version', '_idempotencyKey' ], includeRelations: false, optional: [ '_name' ] })",
        "properties": {
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_name": {
            "type": "string",
            "minLength": 2
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/entities/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          }
        },
        "additionalProperties": true,
        "x-typescript-type": "@loopback/repository-json-schema#Optional<Omit<GenericEntity, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>, '_name'>"
      },
      "ReplaceEntity": {
        "title": "ReplaceEntity",
        "type": "object",
        "description": "(tsType: Omit<GenericEntity, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>, schemaOptions: { title: 'ReplaceEntity', exclude: [ '_id', '_slug', '_ownerUsersCount', '_ownerGroupsCount', '_viewerUsersCount', '_viewerGroupsCount', '_parentsCount', '_fromMetadata', '_toMetadata', '_relationMetadata', '_version', '_idempotencyKey' ], includeRelations: false })",
        "properties": {
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_name": {
            "type": "string",
            "minLength": 2
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/entities/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          }
        },
        "additionalProperties": true,
        "x-typescript-type": "Omit<GenericEntity, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>"
      },
      "NewChildEntity": {
        "title": "NewChildEntity",
        "type": "object",
        "description": "(tsType: Omit<GenericEntity, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey' | '_parents'>, schemaOptions: { title: 'NewChildEntity', exclude: [ '_id', '_slug', '_ownerUsersCount', '_ownerGroupsCount', '_viewerUsersCount', '_viewerGroupsCount', '_parentsCount', '_fromMetadata', '_toMetadata', '_relationMetadata', '_version', '_idempotencyKey', '_parents' ], includeRelations: false })",
        "properties": {
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_name": {
            "type": "string",
            "minLength": 2
          }
        },
        "additionalProperties": true,
        "x-typescript-type": "Omit<GenericEntity, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey' | '_parents'>"
      },
      "EntityReaction": {
        "title": "EntityReaction",
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_idempotencyKey": {
            "type": "string"
          },
          "_version": {
            "type": "number"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_ownerUsersCount": {
            "type": "number"
          },
          "_ownerGroupsCount": {
            "type": "number"
          },
          "_viewerUsersCount": {
            "type": "number"
          },
          "_viewerGroupsCount": {
            "type": "number"
          },
          "_parentsCount": {
            "type": "number"
          },
          "_relationMetadata": {
            "type": "object",
            "description": "Contains the relation metadata for the record"
          },
          "_entityId": {
            "type": "string"
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/entity-reactions/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          }
        },
        "required": [
          "_entityId"
        ],
        "additionalProperties": true
      },
      "HttpErrorResponse": {
        "title": "HttpErrorResponse",
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "object",
              "title": "SingleError",
              "properties": {
                "path": {
                  "type": "string"
                },
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "info": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message",
                "info"
              ],
              "additionalProperties": false
            }
          },
          "status": {
            "type": "number"
          }
        },
        "required": [
          "statusCode",
          "name",
          "message",
          "code",
          "status"
        ],
        "additionalProperties": false
      },
      "NewEntityReaction": {
        "title": "NewEntityReaction",
        "type": "object",
        "description": "(tsType: Omit<EntityReaction, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>, schemaOptions: { title: 'NewEntityReaction', exclude: [ '_id', '_slug', '_ownerUsersCount', '_ownerGroupsCount', '_viewerUsersCount', '_viewerGroupsCount', '_parentsCount', '_fromMetadata', '_toMetadata', '_relationMetadata', '_version', '_idempotencyKey' ], includeRelations: false })",
        "properties": {
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_entityId": {
            "type": "string"
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/entity-reactions/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          }
        },
        "required": [
          "_entityId"
        ],
        "additionalProperties": true,
        "x-typescript-type": "Omit<EntityReaction, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>"
      },
      "PartialEntityReaction": {
        "title": "PartialEntityReaction",
        "type": "object",
        "description": "(tsType: @loopback/repository-json-schema#Optional<Omit<EntityReaction, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>, '_entityId'>, schemaOptions: { title: 'PartialEntityReaction', exclude: [ '_id', '_slug', '_ownerUsersCount', '_ownerGroupsCount', '_viewerUsersCount', '_viewerGroupsCount', '_parentsCount', '_fromMetadata', '_toMetadata', '_relationMetadata', '_version', '_idempotencyKey' ], includeRelations: false, optional: [ '_entityId' ] })",
        "properties": {
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_entityId": {
            "type": "string"
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/entity-reactions/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          }
        },
        "additionalProperties": true,
        "x-typescript-type": "@loopback/repository-json-schema#Optional<Omit<EntityReaction, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>, '_entityId'>"
      },
      "ReplaceEntityReaction": {
        "title": "ReplaceEntityReaction",
        "type": "object",
        "description": "(tsType: Omit<EntityReaction, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>, schemaOptions: { title: 'ReplaceEntityReaction', exclude: [ '_id', '_slug', '_ownerUsersCount', '_ownerGroupsCount', '_viewerUsersCount', '_viewerGroupsCount', '_parentsCount', '_fromMetadata', '_toMetadata', '_relationMetadata', '_version', '_idempotencyKey' ], includeRelations: false })",
        "properties": {
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_entityId": {
            "type": "string"
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/entity-reactions/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          }
        },
        "required": [
          "_entityId"
        ],
        "additionalProperties": true,
        "x-typescript-type": "Omit<EntityReaction, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>"
      },
      "NewChildEntityReaction": {
        "title": "NewChildEntityReaction",
        "type": "object",
        "description": "(tsType: Omit<EntityReaction, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey' | '_parents'>, schemaOptions: { title: 'NewChildEntityReaction', exclude: [ '_id', '_slug', '_ownerUsersCount', '_ownerGroupsCount', '_viewerUsersCount', '_viewerGroupsCount', '_parentsCount', '_fromMetadata', '_toMetadata', '_relationMetadata', '_version', '_idempotencyKey', '_parents' ], includeRelations: false })",
        "properties": {
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_entityId": {
            "type": "string"
          }
        },
        "required": [
          "_entityId"
        ],
        "additionalProperties": true,
        "x-typescript-type": "Omit<EntityReaction, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey' | '_parents'>"
      },
      "GenericEntity": {
        "title": "GenericEntity",
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_idempotencyKey": {
            "type": "string"
          },
          "_version": {
            "type": "number"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_name": {
            "type": "string",
            "minLength": 2
          },
          "_slug": {
            "type": "string"
          },
          "_ownerUsersCount": {
            "type": "number"
          },
          "_ownerGroupsCount": {
            "type": "number"
          },
          "_viewerUsersCount": {
            "type": "number"
          },
          "_viewerGroupsCount": {
            "type": "number"
          },
          "_parentsCount": {
            "type": "number"
          },
          "_relationMetadata": {
            "type": "object",
            "description": "Contains the relation metadata for the record"
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/entities/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          }
        },
        "additionalProperties": true
      },
      "NewEntityInList": {
        "title": "NewEntityInList",
        "type": "object",
        "description": "(tsType: Omit<GenericEntity, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>, schemaOptions: { title: 'NewEntityInList', exclude: [ '_id', '_slug', '_ownerUsersCount', '_ownerGroupsCount', '_viewerUsersCount', '_viewerGroupsCount', '_parentsCount', '_fromMetadata', '_toMetadata', '_relationMetadata', '_version', '_idempotencyKey' ], includeRelations: false })",
        "properties": {
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_name": {
            "type": "string",
            "minLength": 2
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/entities/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          }
        },
        "additionalProperties": true,
        "x-typescript-type": "Omit<GenericEntity, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>"
      },
      "PatchEntityInList": {
        "title": "PatchEntityInList",
        "type": "object",
        "description": "(tsType: Omit<Partial<GenericEntity>, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>, schemaOptions: { title: 'PatchEntityInList', partial: true, exclude: [ '_id', '_slug', '_ownerUsersCount', '_ownerGroupsCount', '_viewerUsersCount', '_viewerGroupsCount', '_parentsCount', '_fromMetadata', '_toMetadata', '_relationMetadata', '_version', '_idempotencyKey' ], includeRelations: false })",
        "properties": {
          "_kind": {
            "type": "string"
          },
          "_validFromDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This is the approval time.Only those records with validFromDateTime property has a value can beseen by other members.If caller is not a member at the creation time, this field is filledautomatically by the server.",
            "nullable": true
          },
          "_validUntilDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field indicates if the rcord is currently active.",
            "nullable": true
          },
          "_createdDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "This field is filled by server at the time of the creation of the record."
          },
          "_createdBy": {
            "type": "string"
          },
          "_lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "_lastUpdatedBy": {
            "type": "string"
          },
          "_ownerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_ownerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_viewerGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_visibility": {
            "type": "string",
            "description": "public: anyone can see the record if validFromDateTime has a value. protected: only owner groups can see. private: only owner users can see.",
            "enum": [
              "public",
              "protected",
              "private"
            ]
          },
          "_name": {
            "type": "string",
            "minLength": 2
          },
          "_parents": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^tapp://localhost/entities/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "uniqueItems": true
            }
          }
        },
        "additionalProperties": true,
        "x-typescript-type": "Omit<Partial<GenericEntity>, '_id' | '_slug' | '_ownerUsersCount' | '_ownerGroupsCount' | '_viewerUsersCount' | '_viewerGroupsCount' | '_parentsCount' | '_fromMetadata' | '_toMetadata' | '_relationMetadata' | '_version' | '_idempotencyKey'>"
      },
      "loopback.Count": {
        "type": "object",
        "title": "loopback.Count",
        "x-typescript-type": "@loopback/repository#Count",
        "properties": {
          "count": {
            "type": "number"
          }
        }
      },
      "SingleError": {
        "type": "object",
        "title": "SingleError",
        "properties": {
          "path": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "info": {
            "type": "object"
          }
        },
        "required": [
          "code",
          "message",
          "info"
        ],
        "additionalProperties": false
      },
      "HttpErrorResponse1": {
        "title": "HttpErrorResponse",
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SingleError"
            }
          },
          "status": {
            "type": "number"
          }
        },
        "required": [
          "statusCode",
          "name",
          "message",
          "code",
          "status"
        ],
        "additionalProperties": false
      },
      "GenericEntityFilter": {
        "type": "object",
        "title": "GenericEntityFilter",
        "properties": {
          "where": {
            "type": "object"
          },
          "fields": {
            "type": "object"
          },
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "include": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "lookup": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "prop": {
                  "type": "string"
                },
                "scope": {
                  "type": "object",
                  "properties": {
                    "fields": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "boolean"
                      }
                    },
                    "where": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "limit": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "skip": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "order": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "additionalProperties": false
      },
      "EntityReactionFilter": {
        "type": "object",
        "title": "EntityReactionFilter",
        "properties": {
          "where": {
            "type": "object"
          },
          "fields": {
            "type": "object"
          },
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "include": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "lookup": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "prop": {
                  "type": "string"
                },
                "scope": {
                  "type": "object",
                  "properties": {
                    "fields": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "boolean"
                      }
                    },
                    "where": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "limit": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "skip": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "order": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "additionalProperties": false
      },
      "ListToEntityRelationFilter": {
        "type": "object",
        "title": "ListToEntityRelationFilter",
        "properties": {
          "where": {
            "type": "object"
          },
          "fields": {
            "type": "object"
          },
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "include": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "lookup": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "prop": {
                  "type": "string"
                },
                "scope": {
                  "type": "object",
                  "properties": {
                    "fields": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "boolean"
                      }
                    },
                    "where": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "limit": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "skip": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "order": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "additionalProperties": false
      },
      "ListReaction.Filter": {
        "type": "object",
        "title": "ListReaction.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "_id": {
                    "type": "boolean"
                  },
                  "_kind": {
                    "type": "boolean"
                  },
                  "_validFromDateTime": {
                    "type": "boolean"
                  },
                  "_validUntilDateTime": {
                    "type": "boolean"
                  },
                  "_createdDateTime": {
                    "type": "boolean"
                  },
                  "_createdBy": {
                    "type": "boolean"
                  },
                  "_lastUpdatedDateTime": {
                    "type": "boolean"
                  },
                  "_lastUpdatedBy": {
                    "type": "boolean"
                  },
                  "_idempotencyKey": {
                    "type": "boolean"
                  },
                  "_version": {
                    "type": "boolean"
                  },
                  "_ownerUsers": {
                    "type": "boolean"
                  },
                  "_ownerGroups": {
                    "type": "boolean"
                  },
                  "_viewerUsers": {
                    "type": "boolean"
                  },
                  "_viewerGroups": {
                    "type": "boolean"
                  },
                  "_visibility": {
                    "type": "boolean"
                  },
                  "_ownerUsersCount": {
                    "type": "boolean"
                  },
                  "_ownerGroupsCount": {
                    "type": "boolean"
                  },
                  "_viewerUsersCount": {
                    "type": "boolean"
                  },
                  "_viewerGroupsCount": {
                    "type": "boolean"
                  },
                  "_parentsCount": {
                    "type": "boolean"
                  },
                  "_relationMetadata": {
                    "type": "boolean"
                  },
                  "_listId": {
                    "type": "boolean"
                  },
                  "_parents": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "_id"
                },
                "uniqueItems": true
              }
            ],
            "title": "ListReaction.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<ListReaction>"
      },
      "ListReaction.Filter1": {
        "type": "object",
        "title": "ListReaction.Filter",
        "properties": {
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1,
            "example": 100
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "where": {
            "title": "ListReaction.WhereFilter",
            "type": "object",
            "additionalProperties": true
          },
          "fields": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "_id": {
                    "type": "boolean"
                  },
                  "_kind": {
                    "type": "boolean"
                  },
                  "_validFromDateTime": {
                    "type": "boolean"
                  },
                  "_validUntilDateTime": {
                    "type": "boolean"
                  },
                  "_createdDateTime": {
                    "type": "boolean"
                  },
                  "_createdBy": {
                    "type": "boolean"
                  },
                  "_lastUpdatedDateTime": {
                    "type": "boolean"
                  },
                  "_lastUpdatedBy": {
                    "type": "boolean"
                  },
                  "_idempotencyKey": {
                    "type": "boolean"
                  },
                  "_version": {
                    "type": "boolean"
                  },
                  "_ownerUsers": {
                    "type": "boolean"
                  },
                  "_ownerGroups": {
                    "type": "boolean"
                  },
                  "_viewerUsers": {
                    "type": "boolean"
                  },
                  "_viewerGroups": {
                    "type": "boolean"
                  },
                  "_visibility": {
                    "type": "boolean"
                  },
                  "_ownerUsersCount": {
                    "type": "boolean"
                  },
                  "_ownerGroupsCount": {
                    "type": "boolean"
                  },
                  "_viewerUsersCount": {
                    "type": "boolean"
                  },
                  "_viewerGroupsCount": {
                    "type": "boolean"
                  },
                  "_parentsCount": {
                    "type": "boolean"
                  },
                  "_relationMetadata": {
                    "type": "boolean"
                  },
                  "_listId": {
                    "type": "boolean"
                  },
                  "_parents": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "_id"
                },
                "uniqueItems": true
              }
            ],
            "title": "ListReaction.Fields"
          }
        },
        "additionalProperties": false,
        "x-typescript-type": "@loopback/repository#Filter<ListReaction>"
      },
      "ListFilter": {
        "type": "object",
        "title": "ListFilter",
        "properties": {
          "where": {
            "type": "object"
          },
          "fields": {
            "type": "object"
          },
          "offset": {
            "type": "integer",
            "minimum": 0
          },
          "limit": {
            "type": "integer",
            "minimum": 1
          },
          "skip": {
            "type": "integer",
            "minimum": 0
          },
          "order": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "include": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "lookup": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "prop": {
                  "type": "string"
                },
                "scope": {
                  "type": "object",
                  "properties": {
                    "fields": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "boolean"
                      }
                    },
                    "where": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "limit": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "skip": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "order": {
                      "oneOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "additionalProperties": false
      },
      "PingResponse": {
        "type": "object",
        "title": "PingResponse",
        "properties": {
          "greeting": {
            "type": "string"
          },
          "date": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "headers": {
            "type": "object",
            "properties": {
              "Content-Type": {
                "type": "string"
              }
            },
            "additionalProperties": true
          }
        }
      }
    }
  }
}
